/* ************************************************************************** */
/*                                                          LE - /            */
/*                                                              /             */
/*   lf_specifier.c                                   .::    .:/ .      .::   */
/*                                                 +:+:+   +:    +:  +:+:+    */
/*   By: fcordon <marvin@le-101.fr>                 +:+   +:    +:    +:+     */
/*                                                 #+#   #+    #+    #+#      */
/*   Created: 2018/11/28 11:00:32 by fcordon      #+#   ##    ##    #+#       */
/*   Updated: 2018/11/28 12:58:08 by fcordon     ###    #+. /#+    ###.fr     */
/*                                                         /                  */
/*                                                        /                   */
/* ************************************************************************** */

#include <stdio.h>
#include "ft_printf.h"
#include "long128.h"

static t_ulong		get_integer_part(t_ulong n, t_ulong *integer, t_ulong curs, t_ulong curs2)
{
	while (curs2)
	{
		if (n & curs)
			*integer |= curs2;
		curs >>= 1;
		curs2 >>= 1;
	}
	return (curs);
}

static void			get_decimal_part(t_ulong n, t_ulong *decimal, t_ulong curs)
{
	t_ulong		x;

	x = 5000000000000000000UL;
	while (curs)
	{
		if (n & curs)
			*decimal += x;
		if (x == 0)
			break ;
		x /= 2;
		curs >>= 1;
	}
}

/*
** Nombres < 1 && > -1
*/

static inline int	get_zero_decimal_part(t_ulong n, t_ulong *integer, t_ulong *decimal, t_uint n_loop)
{
	t_ulong	x;
	t_ulong	curs;

	x = 5000000000000000000UL;
	while (n_loop--)
		x /= 2;
	*decimal = x;
	x /= 2;
	curs = 1UL << 51;
	while (curs)
	{
		if (n & curs)
			*decimal += x;
		if (x == 0)
			break ;
		x /= 2;
		curs >>= 1;
	}
	*integer = 0;
	return (0);
}

static int			is_inf_or_nan(int sign, t_ulong n)
{
	if (sign)
	{
		if (n == 0)
			return (write(1, "-inf", 4));
		return (write(1, "-nan", 4));
	}
	if (n == 0)
		return (write(1, "inf", 3));
	return (write(1, "nan", 3));
}

static int			get_float(t_ulong128 *n, t_ulong *integer, t_ulong *decimal, t_ulong curs)
{
	t_uint	expl;
	t_ulong	curs2;

	*integer = 0;
	*decimal = 0;
	expl = 0;
	//curs2 = 0x4000UL; //(1UL << 14)
	while (curs)
	{
		if (n->hi & curs)
			expl |= curs;
		curs >>= 1;
		//curs2 >>= 1;
	}
	if (expl == 0x7fff)
		return (-1);
	if (expl < 16383)
		return (get_zero_decimal_part(n->lo, integer, decimal, 16382 - expl));
	expl -= 16383;
	*integer |= 1UL << expl;
	curs2 = (expl) ? 1UL << (expl - 1) : 0;
	curs = get_integer_part(n->lo, integer, 0x4000000000000000UL, curs2);
	get_decimal_part(n->lo, decimal, curs);
	return (0);
}

static inline int	ascii_double(t_ulong128 *n, t_opt *o, char *in, char *dc)
{
	t_ulong		decimal;
	t_ulong		integer;
	int			nzero;
	char		*p;
   
	if (get_float(n, &integer, &decimal, 0x4000UL) == -1)
		return (is_inf_or_nan(n->hi & 0x8000UL, n->lo));
	nzero = get_left_zero_count(decimal);
	if (!o->precision)
		o->precision = 6;
	else if (o->precision > 19)
		o->precision = 19;
	p = dc;
	while (nzero--)
		*(p++) = '0';
	decimal += ft_ten_powul(19 - o->precision + nzero) * 5;
	ultoa_buf(decimal, p);
	dc[o->precision] = '\0';
	nzero = ultoa_buf(integer, in);
	in[nzero] = '.';
	in[nzero + 1] = '\0';
	return (n->hi & 0x8000UL);
}

extern inline int	lf_specifier(long double n, t_opt *o)
{
	char		integer[100];
	char		decimal[100];
	int			sign;
	t_ulong128	f;

	f.hi = *(t_ulong*)((void*)&n + 8);
	f.lo = *(t_ulong*)((void*)&n);
	//p_float128_bin(&f);
	if ((sign = ascii_double(&f, o, integer, decimal)) == 1)
		write(1, "-", 1);
	else if (sign > 1)
		return (sign);
	return (write(1, integer, ft_strlen(integer)) + write(1, decimal, ft_strlen(decimal)));
}
